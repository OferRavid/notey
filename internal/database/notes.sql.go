// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notes.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (id, created_at, updated_at, title, content, user_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3
)
RETURNING id, created_at, updated_at, title, content, user_id
`

type CreateNoteParams struct {
	Title   string
	Content string
	UserID  uuid.UUID
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.Title, arg.Content, arg.UserID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes *
WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const getNoteByID = `-- name: GetNoteByID :one
SELECT id, created_at, updated_at, title, content, user_id FROM notes
WHERE id = $1
`

func (q *Queries) GetNoteByID(ctx context.Context, id uuid.UUID) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNoteByID, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
	)
	return i, err
}

const getNotes = `-- name: GetNotes :many
SELECT id, created_at, updated_at, title, content, user_id FROM notes
ORDER BY created_at ASC
`

func (q *Queries) GetNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, getNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Content,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
SET title = $1, content = $2, updated_at = NOW()
WHERE id = $3
RETURNING id, created_at, updated_at, title, content
`

type UpdateNoteParams struct {
	Title   string
	Content string
	ID      uuid.UUID
}

type UpdateNoteRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Title     string
	Content   string
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (UpdateNoteRow, error) {
	row := q.db.QueryRowContext(ctx, updateNote, arg.Title, arg.Content, arg.ID)
	var i UpdateNoteRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
	)
	return i, err
}
